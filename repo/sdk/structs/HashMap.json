[["!module",{"tag":"!module","path":"structs/HashMap","type":"module","imports":["lang/math","lang/vararg","lang/memory","lang/system","lang/stdio","lang/types","ArrayList"]}],["HashEntry",{"abstract":false,"extends":"Object","tag":"HashEntry","name":"HashEntry","unmangled":false,"doc":null,"fullName":"structs_HashMap__HashEntry","genericTypes":["T"],"type":"class","members":[["new",{"arguments":[["key","String",null],["value","T",null]],"extern":false,"tag":"memberFunction(HashEntry, new)","name":"new","unmangled":false,"doc":null,"genericTypes":["T"],"fullName":"structs_HashMap__HashEntry_new","modifiers":["static"],"type":"memberFunction","returnType":"HashEntry"}],["init",{"arguments":[["key","String",null],["value","T",null]],"extern":false,"tag":"memberFunction(HashEntry, init)","name":"init","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashEntry_init","modifiers":[],"type":"memberFunction","returnType":null}],["T",{"extern":false,"tag":"field(HashEntry, T)","name":"T","value":null,"modifiers":[],"type":"field","varType":"Class"}],["key",{"extern":false,"tag":"field(HashEntry, key)","name":"key","value":null,"modifiers":[],"type":"field","varType":"String"}],["value",{"extern":false,"tag":"field(HashEntry, value)","name":"value","value":null,"modifiers":[],"type":"field","varType":"T"}]]}],["HashMap",{"abstract":false,"extends":"Iterable","tag":"HashMap","name":"HashMap","unmangled":false,"doc":null,"fullName":"structs_HashMap__HashMap","genericTypes":["T"],"type":"class","members":[["new",{"arguments":[],"extern":false,"tag":"memberFunction(HashMap, new)","name":"new","unmangled":false,"doc":null,"genericTypes":["T"],"fullName":"structs_HashMap__HashMap_new","modifiers":["static"],"type":"memberFunction","returnType":"HashMap"}],["init",{"arguments":[],"extern":false,"tag":"memberFunction(HashMap, init)","name":"init","unmangled":false,"doc":"/**\n     * Returns a hash table with 100 buckets\n     * @return HashTable\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_init","modifiers":[],"type":"memberFunction","returnType":null}],["new",{"arguments":[["capacity","UInt",null]],"extern":false,"tag":"memberFunction(HashMap, new~withCapacity)","name":"new~withCapacity","unmangled":false,"doc":null,"genericTypes":["T"],"fullName":"structs_HashMap__HashMap_new_withCapacity","modifiers":["static"],"type":"memberFunction","returnType":"HashMap"}],["init",{"arguments":[["capacity","UInt",null]],"extern":false,"tag":"memberFunction(HashMap, init~withCapacity)","name":"init~withCapacity","unmangled":false,"doc":"/**\n     * Returns a hash table of a specified bucket capacity.\n     * @param UInt capacity The number of buckets to use\n     * @return HashTable\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_init_withCapacity","modifiers":[],"type":"memberFunction","returnType":null}],["murmurHash",{"arguments":[["keyTagazok","T",null],["seed","UInt",null]],"extern":false,"tag":"memberFunction(HashMap, murmurHash)","name":"murmurHash","unmangled":false,"doc":"/**\n     * Port of Austin Appleby's Murmur Hash implementation\n     * http://murmurhash.googlepages.com/\n     * TODO: Use this to hash not just strings, but any type of object\n     * @param Object key The key to hash\n     * @param Int len The size of the key (in bytes)\n     * @param UInt seed The seed value\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_murmurHash","modifiers":[],"type":"memberFunction","returnType":"UInt"}],["ac_X31_hash",{"arguments":[["s","String",null]],"extern":false,"tag":"memberFunction(HashMap, ac_X31_hash)","name":"ac_X31_hash","unmangled":false,"doc":"/**\n     * khash's ac_X31_hash_string\n     * http://attractivechaos.awardspace.com/khash.h.html\n     * @access private\n     * @param String s The string to hash\n     * @return UInt\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_ac_X31_hash","modifiers":[],"type":"memberFunction","returnType":"UInt"}],["getEntry",{"arguments":[["key","String",null]],"extern":false,"tag":"memberFunction(HashMap, getEntry)","name":"getEntry","unmangled":false,"doc":"/**\n     * Returns the HashEntry associated with a key.\n     * @access private\n     * @param String key The key associated with the HashEntry\n     * @return HashEntry\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_getEntry","modifiers":[],"type":"memberFunction","returnType":"HashEntry"}],["put",{"arguments":[["key","String",null],["value","T",null]],"extern":false,"tag":"memberFunction(HashMap, put)","name":"put","unmangled":false,"doc":"/**\n     * Puts a key/value pair in the hash table. If the pair already exists,\n     * it is overwritten.\n     * @param String key The key to be hashed\n     * @param Object value The value associated with the key\n     * @return Bool\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_put","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["add",{"arguments":[["key","String",null],["value","T",null]],"extern":false,"tag":"memberFunction(HashMap, add)","name":"add","unmangled":false,"doc":"/**\n     * Alias of put\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_add","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["get",{"arguments":[["key","String",null]],"extern":false,"tag":"memberFunction(HashMap, get)","name":"get","unmangled":false,"doc":"/**\n     * Returns the value associated with the key. Returns null if the key\n     * does not exist.\n     * @param String key The key associated with the value\n     * @return Object\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_get","modifiers":[],"type":"memberFunction","returnType":"T"}],["isEmpty",{"arguments":[],"extern":false,"tag":"memberFunction(HashMap, isEmpty)","name":"isEmpty","unmangled":false,"doc":"/**\n     * @return true if this map is empty, false if not\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_isEmpty","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["contains",{"arguments":[["key","String",null]],"extern":false,"tag":"memberFunction(HashMap, contains)","name":"contains","unmangled":false,"doc":"/**\n     * Returns whether or not the key exists in the hash table.\n     * @param String key The key to check\n     * @return Bool\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_contains","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["remove",{"arguments":[["key","String",null]],"extern":false,"tag":"memberFunction(HashMap, remove)","name":"remove","unmangled":false,"doc":"/**\n     * Removes the entry associated with the key\n     * @param String key The key to remove\n     * @return Bool\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_remove","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["resize",{"arguments":[["_capacity","UInt",null]],"extern":false,"tag":"memberFunction(HashMap, resize)","name":"resize","unmangled":false,"doc":"/**\n     * Resizes the hash table to a new capacity\n     * @param UInt _capacity The new table capacity\n     * @return Bool\n     */","genericTypes":[],"fullName":"structs_HashMap__HashMap_resize","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["iterator",{"arguments":[],"extern":false,"tag":"memberFunction(HashMap, iterator)","name":"iterator","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMap_iterator","modifiers":[],"type":"memberFunction","returnType":"Iterator"}],["clear",{"arguments":[],"extern":false,"tag":"memberFunction(HashMap, clear)","name":"clear","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMap_clear","modifiers":[],"type":"memberFunction","returnType":null}],["size",{"extern":false,"tag":"field(HashMap, size)","name":"size","value":null,"modifiers":[],"type":"field","varType":"UInt"}],["capacity",{"extern":false,"tag":"field(HashMap, capacity)","name":"capacity","value":null,"modifiers":[],"type":"field","varType":"UInt"}],["buckets",{"extern":false,"tag":"field(HashMap, buckets)","name":"buckets","value":null,"modifiers":[],"type":"field","varType":"pointer(ArrayList)"}],["keys",{"extern":false,"tag":"field(HashMap, keys)","name":"keys","value":null,"modifiers":[],"type":"field","varType":"ArrayList"}]]}],["HashMapValueIterator",{"abstract":false,"extends":"Iterator","tag":"HashMapValueIterator","name":"HashMapValueIterator","unmangled":false,"doc":null,"fullName":"structs_HashMap__HashMapValueIterator","genericTypes":["T"],"type":"class","members":[["new",{"arguments":[["map","HashMap",null]],"extern":false,"tag":"memberFunction(HashMapValueIterator, new)","name":"new","unmangled":false,"doc":null,"genericTypes":["T"],"fullName":"structs_HashMap__HashMapValueIterator_new","modifiers":["static"],"type":"memberFunction","returnType":"HashMapValueIterator"}],["init",{"arguments":[["map","HashMap",null]],"extern":false,"tag":"memberFunction(HashMapValueIterator, init)","name":"init","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_init","modifiers":[],"type":"memberFunction","returnType":null}],["hasNext",{"arguments":[],"extern":false,"tag":"memberFunction(HashMapValueIterator, hasNext)","name":"hasNext","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_hasNext","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["next",{"arguments":[],"extern":false,"tag":"memberFunction(HashMapValueIterator, next)","name":"next","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_next","modifiers":[],"type":"memberFunction","returnType":"T"}],["hasPrev",{"arguments":[],"extern":false,"tag":"memberFunction(HashMapValueIterator, hasPrev)","name":"hasPrev","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_hasPrev","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["prev",{"arguments":[],"extern":false,"tag":"memberFunction(HashMapValueIterator, prev)","name":"prev","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_prev","modifiers":[],"type":"memberFunction","returnType":"T"}],["remove",{"arguments":[],"extern":false,"tag":"memberFunction(HashMapValueIterator, remove)","name":"remove","unmangled":false,"doc":null,"genericTypes":[],"fullName":"structs_HashMap__HashMapValueIterator_remove","modifiers":[],"type":"memberFunction","returnType":"Bool"}],["map",{"extern":false,"tag":"field(HashMapValueIterator, map)","name":"map","value":null,"modifiers":[],"type":"field","varType":"HashMap"}],["index",{"extern":false,"tag":"field(HashMapValueIterator, index)","name":"index","value":null,"modifiers":[],"type":"field","varType":"Int"}]]}]]